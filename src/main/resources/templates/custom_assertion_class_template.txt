package ${package};

${imports}
/**
 * {@link ${class_to_assert}} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ${custom_assertion_class} extends AbstractObjectAssert<${custom_assertion_class_without_bounded_generics}, ${class_to_assert_without_bounded_generics}> {

  /**
   * Creates a new <code>{@link ${custom_assertion_class_without_bounded_generics}}</code> to make assertions on actual ${class_to_assert_without_bounded_generics}.
   * @param actual the ${class_to_assert_without_bounded_generics} we want to make assertions on.
   */
  public ${custom_assertion_class_without_generic}(${class_to_assert_without_bounded_generics} actual) {
    super(actual, ${custom_assertion_class_without_generic}.class);
  }

  /**
   * An entry point for ${custom_assertion_class_without_bounded_generics} to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(my${class_to_assert_without_generic})</code> and get specific assertion with code completion.
   * @param actual the ${class_to_assert_without_bounded_generics} we want to make assertions on.
   * @return a new <code>{@link ${custom_assertion_class_without_bounded_generics}}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ${class_generic_type_declaration} ${custom_assertion_class_without_bounded_generics} assertThat(${class_to_assert_without_bounded_generics} actual) {
    return new ${custom_assertion_class_without_bounded_generics}(actual);
  }
