package org.assertj.assertions.generator.data.generic;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link BoundCodeableConceptDt<T>} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBoundCodeableConceptDtAssert<S extends AbstractBoundCodeableConceptDtAssert<S, A, T>, A extends BoundCodeableConceptDt<T>, T extends Enum<?>> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBoundCodeableConceptDtAssert<T>}</code> to make assertions on actual BoundCodeableConceptDt<T>.
   * @param actual the BoundCodeableConceptDt<T> we want to make assertions on.
   */
  protected AbstractBoundCodeableConceptDtAssert(A actual, Class<?> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains the given T elements.
   * @param valueAsEnum the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain all given T elements.
   */
  public S hasValueAsEnum(T... valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsEnum == null) failWithMessage("Expecting valueAsEnum parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getValueAsEnum(), valueAsEnum);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains the given T elements in Collection.
   * @param valueAsEnum the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain all given T elements.
   */
  public S hasValueAsEnum(java.util.Collection<? extends T> valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T collection is not null.
    if (valueAsEnum == null) {
      failWithMessage("Expecting valueAsEnum parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getValueAsEnum(), valueAsEnum.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains <b>only</b> the given T elements and nothing else in whatever order.
   * @param valueAsEnum the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain all given T elements.
   */
  public S hasOnlyValueAsEnum(T... valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsEnum == null) failWithMessage("Expecting valueAsEnum parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getValueAsEnum(), valueAsEnum);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains <b>only</b> the given T elements in Collection and nothing else in whatever order.
   * @param valueAsEnum the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain all given T elements.
   */
  public S hasOnlyValueAsEnum(java.util.Collection<? extends T> valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T collection is not null.
    if (valueAsEnum == null) {
      failWithMessage("Expecting valueAsEnum parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getValueAsEnum(), valueAsEnum.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain the given T elements.
   *
   * @param valueAsEnum the given elements that should not be in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains any given T elements.
   */
  public S doesNotHaveValueAsEnum(T... valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsEnum == null) failWithMessage("Expecting valueAsEnum parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getValueAsEnum(), valueAsEnum);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum does not contain the given T elements in Collection.
   *
   * @param valueAsEnum the given elements that should not be in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum contains any given T elements.
   */
  public S doesNotHaveValueAsEnum(java.util.Collection<? extends T> valueAsEnum) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T collection is not null.
    if (valueAsEnum == null) {
      failWithMessage("Expecting valueAsEnum parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getValueAsEnum(), valueAsEnum.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>> has no valueAsEnum.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsEnum is not empty.
   */
  public S hasNoValueAsEnum() {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have valueAsEnum but had :\n  <%s>";

    // check
    if (actual.getValueAsEnum().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getValueAsEnum());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray contains the given T elements.
   * @param valueAsArray the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray does not contain all given T elements.
   */
  public S hasValueAsArray(T... valueAsArray) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsArray == null) failWithMessage("Expecting valueAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.valueAsArray).contains(valueAsArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray contains <b>only</b> the given T elements and nothing else in whatever order.
   *
   * @param valueAsArray the given elements that should be contained in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray does not contain all given T elements and nothing else.
   */
  public S hasOnlyValueAsArray(T... valueAsArray) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsArray == null) failWithMessage("Expecting valueAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.valueAsArray).containsOnly(valueAsArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray does not contain the given T elements.
   *
   * @param valueAsArray the given elements that should not be in actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray contains any given T elements.
   */
  public S doesNotHaveValueAsArray(T... valueAsArray) {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // check that given T varargs is not null.
    if (valueAsArray == null) failWithMessage("Expecting valueAsArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.valueAsArray).doesNotContain(valueAsArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BoundCodeableConceptDt<T extends Enum<?>> has no valueAsArray.
   * @return this assertion object.
   * @throws AssertionError if the actual BoundCodeableConceptDt<T extends Enum<?>>'s valueAsArray is not empty.
   */
  public S hasNoValueAsArray() {
    // check that actual BoundCodeableConceptDt<T extends Enum<?>> we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have valueAsArray but had :\n  <%s>";

    // check that it is not empty
    if (actual.valueAsArray.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.valueAsArray));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
