package org.assertj.assertions.generator.data.generic;

/**
 * {@link BoundCodeableConceptDt<T>} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractBoundCodeableConceptDtAssert<T>} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class BoundCodeableConceptDtAssert<T extends Enum<?>> extends AbstractBoundCodeableConceptDtAssert<BoundCodeableConceptDtAssert<T>, BoundCodeableConceptDt<T>, T> {

  /**
   * Creates a new <code>{@link BoundCodeableConceptDtAssert<T>}</code> to make assertions on actual BoundCodeableConceptDt<T>.
   * @param actual the BoundCodeableConceptDt<T> we want to make assertions on.
   */
  public BoundCodeableConceptDtAssert(BoundCodeableConceptDt<T> actual) {
    super(actual, BoundCodeableConceptDtAssert.class);
  }

  /**
   * An entry point for BoundCodeableConceptDtAssert<T> to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBoundCodeableConceptDt)</code> and get specific assertion with code completion.
   * @param actual the BoundCodeableConceptDt<T> we want to make assertions on.
   * @return a new <code>{@link BoundCodeableConceptDtAssert<T>}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static <T extends Enum<?>> BoundCodeableConceptDtAssert<T> assertThat(BoundCodeableConceptDt<T> actual) {
    return new BoundCodeableConceptDtAssert<T>(actual);
  }

}
