package com.google.common.base;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link Optional<T>} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractOptionalAssert<S extends AbstractOptionalAssert<S, A, T>, A extends Optional<T>, T> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractOptionalAssert<T>}</code> to make assertions on actual Optional<T>.
   * @param actual the Optional<T> we want to make assertions on.
   */
  protected AbstractOptionalAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Optional<T> is present.
   * @return this assertion object.
   * @throws AssertionError - if the actual Optional<T> is not present.
   */
  public S isPresent() {
    // check that actual Optional<T> we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isPresent()) {
      failWithMessage("\nExpecting that actual Optional<T> is present but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Optional<T> is not present.
   * @return this assertion object.
   * @throws AssertionError - if the actual Optional<T> is present.
   */
  public S isNotPresent() {
    // check that actual Optional<T> we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isPresent()) {
      failWithMessage("\nExpecting that actual Optional<T> is not present but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
