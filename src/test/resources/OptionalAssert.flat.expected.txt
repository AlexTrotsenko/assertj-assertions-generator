package com.google.common.base;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link Optional<T>} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class OptionalAssert<T> extends AbstractObjectAssert<OptionalAssert<T>, Optional<T>> {

  /**
   * Creates a new <code>{@link OptionalAssert<T>}</code> to make assertions on actual Optional<T>.
   * @param actual the Optional<T> we want to make assertions on.
   */
  public OptionalAssert(Optional<T> actual) {
    super(actual, OptionalAssert.class);
  }

  /**
   * An entry point for OptionalAssert<T> to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOptional<T>)</code> and get specific assertion with code completion.
   * @param actual the Optional<T> we want to make assertions on.
   * @return a new <code>{@link OptionalAssert<T>}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static <T> OptionalAssert<T> assertThat(Optional<T> actual) {
    return new OptionalAssert<T>(actual);
  }

  /**
   * Verifies that the actual Optional<T> is present.
   * @return this assertion object.
   * @throws AssertionError - if the actual Optional<T> is not present.
   */
  public OptionalAssert<T> isPresent() {
    // check that actual Optional<T> we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isPresent()) {
      failWithMessage("\nExpecting that actual Optional<T> is present but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Optional<T> is not present.
   * @return this assertion object.
   * @throws AssertionError - if the actual Optional<T> is present.
   */
  public OptionalAssert<T> isNotPresent() {
    // check that actual Optional<T> we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isPresent()) {
      failWithMessage("\nExpecting that actual Optional<T> is not present but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

}
